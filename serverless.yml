service: serverless-short-linker-api

frameworkVersion: "3"

plugins:
  - serverless-esbuild
  - serverless-plugin-scripts

custom:
  stage: "${opt:stage, self:provider.stage}"
  region: "${opt:region, self:provider.region}"
  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    keepNames: true
  scripts:
    hooks:
      "after:deploy:finalize": node --experimental-modules src/scripts/verifyEmail.mjs

package:
  individually: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-central-1

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:GetItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
          Resource:
            - Fn::GetAtt:
                - ShortLinkerTable
                - Arn

        - Effect: "Allow"
          Action:
            - "secretsmanager:GetSecretValue"
            - "secretsmanager:CreateSecret"
          Resource: "*"

        - Effect: "Allow"
          Action:
            - "events:PutEvents"
          Resource: "*"

        - Effect: "Allow"
          Action:
            - sqs:GetQueueUrl
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:ReceiveMessage
          Resource:
            - Fn::GetAtt:
                - DeactivatorQueue
                - Arn

        - Effect: "Allow"
          Action:
            - ses:SendEmail
            - ses:VerifyEmailAddress
            - ses:ListVerifiedEmailAddresses
          Resource: "*"

  environment:
    TABLE_NAME: { Ref: ShortLinkerTable }
    QUEUE_URL: { Ref: DeactivatorQueue }
    EMAIL_FROM: ${ssm:/aws/reference/secretsmanager/EMAIL_FROM}
    BASE_URL: !Join # Example: https://mvbcbjk4t5.execute-api.eu-central-1.amazonaws.com/dev/
      - ""
      - - "https://"
        - { Ref: "ApiGatewayRestApi" }
        - ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}/"

functions:
  createLink:
    handler: src/handlers/createLink.main
    events:
      - http:
          path: /link
          method: post
          authorizer:
            name: customAuthorizer
            resultTtlInSeconds: 60
            identitySource: method.request.header.authorizationToken
            identityValidationExpression: 'Bearer\s[\d|a-f]{8}-([\d|a-f]{4}-){3}[\d|a-f]{12}'
            type: request
          request:
            schemas:
              application/json: ${file(src/models/createLink.json)}

  listLinks:
    handler: src/handlers/listLinks.main
    events:
      - http:
          path: /links
          method: get
          authorizer:
            name: customAuthorizer
            resultTtlInSeconds: 60
            identitySource: method.request.header.authorizationToken
            identityValidationExpression: 'Bearer\s[\d|a-f]{8}-([\d|a-f]{4}-){3}[\d|a-f]{12}'
            type: request

  deactivateLink:
    handler: src/handlers/deactivateLink.main
    events:
      - http:
          path: /link/deactivate
          method: post
          authorizer:
            name: customAuthorizer
            resultTtlInSeconds: 60
            identitySource: method.request.header.authorizationToken
            identityValidationExpression: 'Bearer\s[\d|a-f]{8}-([\d|a-f]{4}-){3}[\d|a-f]{12}'
            type: request
          request:
            schemas:
              application/json: ${file(src/models/deactivateLink.json)}

  redirectLink:
    handler: src/handlers/redirectLink.main
    events:
      - http:
          path: /{shortAlias}
          method: get

  signUp:
    handler: src/handlers/signUp.main
    events:
      - http:
          path: /auth/signup
          method: post
          request:
            schemas:
              application/json: ${file(src/models/user.json)}

  signIn:
    handler: src/handlers/signIn.main
    events:
      - http:
          path: /auth/signin
          method: post
          request:
            schemas:
              application/json: ${file(src/models/user.json)}

  customAuthorizer:
    handler: src/auth/authorizer.main

  deactivator:
    handler: src/handlers/deactivator.main
    events:
      - eventBridge:
          eventBus: default
          pattern:
            source:
              - saas.external

  deactivatorQueue:
    handler: src/handlers/deactivatorQueue.main
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - DeactivatorQueue
              - Arn
          batchSize: 10

resources:
  Resources:
    ShortLinkerTable:
      Type: "AWS::DynamoDB::GlobalTable"
      Properties:
        TableName: ShortLinkerTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Replicas:
          - Region: eu-central-1
          - Region: us-east-1
          - Region: us-west-1
          - Region: ap-south-1
          - Region: eu-west-1
          - Region: eu-north-1

    DeactivatorQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "DeactivatorQueue"
